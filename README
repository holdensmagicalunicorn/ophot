Introduction
------------

This is ophot, a small web application which provides a simple photography
portfolio website. It allows a manager to log in in order to add or remove
photos. It allows viewers to purchase prints of photographs.

This README was last updated on 31 May 2011.

Contents
--------

This package contains:

* MANIFEST.in - the manifest file for creating a Python distutils package
* ophot/ - the Python package containing the application itself
* ophot.wsgi - the WSGI specification file which runs the application when
  deployed to a server as a WSGI application
* README - this file
* reset-db.sh - script which resets the database to an initial empty state
  (warning: this will remove any photos which have been uploaded to the
  application)
* runserver.py - Python script which runs the Ophot Flask application in the
  current directory
* setup.py - Python setuptools configuration file for packaging this
  application
* TODO - tasks to be done for developers of this application

The ophot/ directory contains:

* config.py - configuration for the application and some settings for
  user-visible parts of the site
* db/ - the directory which contains the database, the error log, and the local
  settings file created by the application (by default)
* forms.py - a module containing WTF Form class definitions for use in the
  application
* __init__.py - general setup and definitions for the Ophot package
* queries.py - string constants which are used in queries to the database
* requests.py - functions which process routes which are used as Ajax calls
* schema.sql - the database schema for the photo database
* static/ - the static content for the site, including scripts and styles
* templates/ - the Jinja templates defining the dynamically generated HTML
  pages for the site
* views.py - functions which process routes which are the views for users of
  the site

Installing
----------

This application requires Python 2.7 (http://www.python.org/).

This application requires the following libraries to be installed:

* ConfigObj - http://www.voidspace.org.uk/python/configobj.html
* Flask - http://flask.pocoo.org/
* Flask-Uploads - http://packages.python.org/Flask-Uploads/
* Flask-WTF - http://packages.python.org/Flask-WTF/
* Python Imaging Library (PIL) - http://www.pythonware.com/products/pil/

Using "pip" or "easy_install" is probably the easiest way to install these:

  pip install Flask Flask-Uploads Flask-WTF PIL configobj

Configuring
-----------

To configure this application, edit the configuration file "config.py". You
must add at least USERNAME, PASSWORD, and SECRET_KEY for allowing the
administrator to log in. You probably want to change the NAME value as well.

Instead of editing the configuration file directly, you can set the
OPHOT_SETTINGS environment variable to be the path to a file containing the
configuration setting which you wish to set. For example, create a text file
called "myconfig" and add the following:

  USERNAME = 'myusername'
  PASSWORD = 'mypassword'
  SECRET_KEY = '123456789012345678901234'

(See the config.py file for more information on how to generate a secret key.)
Next change the OPHOT_SETTINGS environment variable to point to that file:

  export OPHOT_SETTINGS=/path/to/myconfig

Running
-------

Before running the application we also need to initialize the database. The
reset-db.sh script will create the database for you based on the schema in the
schema.sql file:

  ./reset-db.sh

To run the web server and start serving, run:

  python runserver.py

Remember to disable debug mode when running on a production server.

One can also deploy this application as a WSGI application, using, for example,
mod_wsgi for Apache.

Contact
-------

Jeffrey Finkelstein <jeffrey.finkelstein@gmail.com>
